{"posts":[{"id":"172338516139198_982332025139839","from":{"name":"Muhammad Sherbeeny","id":"10158237074750527"},"message":"Some people say it's not stable and causes security issues!\n\nI need to install it (or anything else better) on my Galaxy S5 to it as a USB keyboard for Toshiba Libretto W100.\n\nAny recommendations?","caption":null,"description":null,"created_time":"2015-08-01T02:03:09+10:00","total_likes":0,"total_comments":1},{"id":"172338516139198_982690821770626","from":{"name":"Abdelrahman Osama","id":"10155619445890931"},"message":"What is Design Thinking ??","caption":null,"description":"What you don't know about #DesignThinking\n\nSLIDES: http://www.slideshare.net/aopoint/what-you-dont-know-about-design-thinking\n\nBRIEF:\n\nDesign Thinking methods lately have been used in a much broader aspect than what's been thought before.\n\nCorporates, Organizations and even Governments have discovered the power of design in solving what's labeled as the \"wicked problems\" by applying design thinking methods solving those problems, and have shown really great success in that.\n\nThey are using Design methods in Business sectors, Public sectors and even in Policy Making in some European countries like the UK and Denmark.\n\nThat explains alot about why American bank Capital One acquires a specialized Design Consultancy like Adaptive path, and why IBM are investing 100 Million Dollars hiring 1,000 Designers globally.\n\nhttp://www.slideshare.net/aopoint/what-you-dont-know-about-design-thinking","created_time":"2015-08-01T19:41:35+10:00","total_likes":1,"total_comments":0},{"id":"172338516139198_982740645098977","from":{"name":"Ahmed Gaber","id":"1317803628265220"},"message":"I found this article really helpful and interesting..","caption":"cs.cornell.edu","description":null,"created_time":"2015-08-01T22:11:19+10:00","total_likes":3,"total_comments":0},{"id":"172338516139198_982347635138278","from":{"name":"Mohammad Tayseer","id":"10154965677956341"},"message":null,"caption":"theguardian.com","description":"Social media giant plans within months to start testing the craft which is intended to provide internet access to remote areas","created_time":"2015-08-01T02:59:34+10:00","total_likes":6,"total_comments":1},{"id":"172338516139198_982467058459669","from":{"name":"Ahmed Syam","id":"10212751928298930"},"message":null,"caption":null,"description":"الفرق بين :\n\nToken based Authentication\n&\nSession based Authentication","created_time":"2015-08-01T08:38:29+10:00","total_likes":22,"total_comments":10},{"id":"172338516139198_982844141755294","from":{"name":"Muhammad Al Rabbani","id":"436443206686932"},"message":"I have noticed that any Geeks need to understand and become educated about the concept of free software, as I have noticed in many discussions. Many people are skeptical, some only know about the proprietary mode and others are even scared of the concept of Free Software and wonder how they would make a living. So to shine the light on the subject and get people's heads in order I decided to share this article by Richard Stallman that can be found inside Emacs :)\n\n  The GNU Project\n\n   by Richard Stallman\n\n   originally published in the book \"Open Sources\"\n\n  The first software-sharing community\n\n   When I started working at the MIT Artificial Intelligence Lab in 1971,\n   I became part of a software-sharing community that had existed for many\n   years. Sharing of software was not limited to our particular community;\n   it is as old as computers, just as sharing of recipes is as old as\n   cooking. But we did it more than most.\n\n   The AI Lab used a timesharing operating system called ITS (the\n   Incompatible Timesharing System) that the lab's staff hackers (1) had\n   designed and written in assembler language for the Digital PDP-10, one\n   of the large computers of the era. As a member of this community, an AI\n   lab staff system hacker, my job was to improve this system.\n\n   We did not call our software \"free software\", because that term did not\n   yet exist; but that is what it was. Whenever people from another\n   university or a company wanted to port and use a program, we gladly let\n   them. If you saw someone using an unfamiliar and interesting program,\n   you could always ask to see the source code, so that you could read it,\n   change it, or cannibalize parts of it to make a new program.\n\n   (1) The use of \"hacker\" to mean \"security breaker\" is a confusion on\n   the part of the mass media. We hackers refuse to recognize that\n   meaning, and continue using the word to mean, \"Someone who loves to\n   program and enjoys being clever about it.\"\n\n  The collapse of the community\n\n   The situation changed drastically in the early 1980s when Digital\n   discontinued the PDP-10 series. Its architecture, elegant and powerful\n   in the 60s, could not extend naturally to the larger address spaces\n   that were becoming feasible in the 80s. This meant that nearly all of\n   the programs composing ITS were obsolete.\n\n   The AI lab hacker community had already collapsed, not long before. In\n   1981, the spin-off company Symbolics had hired away nearly all of the\n   hackers from the AI lab, and the depopulated community was unable to\n   maintain itself. (The book Hackers, by Steve Levy, describes these\n   events, as well as giving a clear picture of this community in its\n   prime.) When the AI lab bought a new PDP-10 in 1982, its administrators\n   decided to use Digital's non-free timesharing system instead of ITS.\n\n   The modern computers of the era, such as the VAX or the 68020, had\n   their own operating systems, but none of them were free software: you\n   had to sign a nondisclosure agreement even to get an executable copy.\n\n   This meant that the first step in using a computer was to promise not\n   to help your neighbor. A cooperating community was forbidden. The rule\n   made by the owners of proprietary software was, \"If you share with your\n   neighbor, you are a pirate. If you want any changes, beg us to make\n   them.\"\n\n   The idea that the proprietary-software social system--the system that\n   says you are not allowed to share or change software--is antisocial,\n   that it is unethical, that it is simply wrong, may come as a surprise\n   to some readers. But what else could we say about a system based on\n   dividing the public and keeping users helpless? Readers who find the\n   idea surprising may have taken proprietary-software social system as\n   given, or judged it on the terms suggested by proprietary software\n   businesses. Software publishers have worked long and hard to convince\n   people that there is only one way to look at the issue.\n\n   When software publishers talk about \"enforcing\" their \"rights\" or\n   \"stopping piracy\", what they actually *say* is secondary. The real\n   message of these statements is in the unstated assumptions they take\n   for granted; the public is supposed to accept them uncritically. So\n   let's examine them.\n\n   One assumption is that software companies have an unquestionable\n   natural right to own software and thus have power over all its users.\n   (If this were a natural right, then no matter how much harm it does to\n   the public, we could not object.) Interestingly, the US Constitution\n   and legal tradition reject this view; copyright is not a natural right,\n   but an artificial government-imposed monopoly that limits the users'\n   natural right to copy.\n\n   Another unstated assumption is that the only important thing about\n   software is what jobs it allows you to do--that we computer users\n   should not care what kind of society we are allowed to have.\n\n   A third assumption is that we would have no usable software (or would\n   never have a program to do this or that particular job) if we did not\n   offer a company power over the users of the program. This assumption\n   may have seemed plausible, before the free software movement\n   demonstrated that we can make plenty of useful software without putting\n   chains on it.\n\n   If we decline to accept these assumptions, and judge these issues based\n   on ordinary common-sense morality while placing the users first, we\n   arrive at very different conclusions. Computer users should be free to\n   modify programs to fit their needs, and free to share software, because\n   helping other people is the basis of society.\n\n   There is no room here for an extensive statement of the reasoning\n   behind this conclusion, so I refer the reader to the web page,\n   http://www.gnu.org/philosophy/why-free.html.\n\n  A stark moral choice.\n\n   With my community gone, to continue as before was impossible. Instead,\n   I faced a stark moral choice.\n\n   The easy choice was to join the proprietary software world, signing\n   nondisclosure agreements and promising not to help my fellow hacker.\n   Most likely I would also be developing software that was released under\n   nondisclosure agreements, thus adding to the pressure on other people\n   to betray their fellows too.\n\n   I could have made money this way, and perhaps amused myself writing\n   code. But I knew that at the end of my career, I would look back on\n   years of building walls to divide people, and feel I had spent my life\n   making the world a worse place.\n\n   I had already experienced being on the receiving end of a nondisclosure\n   agreement, when someone refused to give me and the MIT AI lab the\n   source code for the control program for our printer. (The lack of\n   certain features in this program made use of the printer extremely\n   frustrating.) So I could not tell myself that nondisclosure agreements\n   were innocent. I was very angry when he refused to share with us; I\n   could not turn around and do the same thing to everyone else.\n\n   Another choice, straightforward but unpleasant, was to leave the\n   computer field. That way my skills would not be misused, but they would\n   still be wasted. I would not be culpable for dividing and restricting\n   computer users, but it would happen nonetheless.\n\n   So I looked for a way that a programmer could do something for the\n   good. I asked myself, was there a program or programs that I could\n   write, so as to make a community possible once again?\n\n   The answer was clear: what was needed first was an operating system.\n   That is the crucial software for starting to use a computer. With an\n   operating system, you can do many things; without one, you cannot run\n   the computer at all. With a free operating system, we could again have\n   a community of cooperating hackers--and invite anyone to join. And\n   anyone would be able to use a computer without starting out by\n   conspiring to deprive his or her friends.\n\n   As an operating system developer, I had the right skills for this job.\n   So even though I could not take success for granted, I realized that I\n   was elected to do the job. I chose to make the system compatible with\n   Unix so that it would be portable, and so that Unix users could easily\n   switch to it. The name GNU was chosen following a hacker tradition, as\n   a recursive acronym for \"GNU's Not Unix.\"\n\n   An operating system does not mean just a kernel, barely enough to run\n   other programs. In the 1970s, every operating system worthy of the name\n   included command processors, assemblers, compilers, interpreters,\n   debuggers, text editors, mailers, and much more. ITS had them, Multics\n   had them, VMS had them, and Unix had them. The GNU operating system\n   would include them too.\n\n   Later I heard these words, attributed to Hillel (1):\n\n     If I am not for myself, who will be for me?\n     If I am only for myself, what am I?\n     If not now, when?\n\n   The decision to start the GNU project was based on a similar spirit.\n\n   (1) As an Atheist, I don't follow any religious leaders, but I\n   sometimes find I admire something one of them has said.\n\n  Free as in freedom\n\n   The term \"free software\" is sometimes misunderstood--it has nothing to\n   do with price. It is about freedom. Here, therefore, is the definition\n   of free software: a program is free software, for you, a particular\n   user, if:\n     * You have the freedom to run the program, for any purpose.\n     * You have the freedom to modify the program to suit your needs. (To\n       make this freedom effective in practice, you must have access to\n       the source code, since making changes in a program without having\n       the source code is exceedingly difficult.)\n     * You have the freedom to redistribute copies, either gratis or for a\n       fee.\n     * You have the freedom to distribute modified versions of the\n       program, so that the community can benefit from your improvements.\n\n   Since \"free\" refers to freedom, not to price, there is no contradiction\n   between selling copies and free software. In fact, the freedom to sell\n   copies is crucial: collections of free software sold on CD-ROMs are\n   important for the community, and selling them is an important way to\n   raise funds for free software development. Therefore, a program which\n   people are not free to include on these collections is not free\n   software.\n\n   Because of the ambiguity of \"free\", people have long looked for\n   alternatives, but no one has found a suitable alternative. The English\n   Language has more words and nuances than any other, but it lacks a\n   simple, unambiguous, word that means \"free\", as in\n   freedom--\"unfettered\" being the word that comes closest in meaning.\n   Such alternatives as \"liberated\", \"freedom\", and \"open\" have either the\n   wrong meaning or some other disadvantage.\n\n  GNU software and the GNU system\n\n   Developing a whole system is a very large project. To bring it into\n   reach, I decided to adapt and use existing pieces of free software\n   wherever that was possible. For example, I decided at the very\n   beginning to use TeX as the principal text formatter; a few years\n   later, I decided to use the X Window System rather than writing another\n   window system for GNU.\n\n   Because of this decision, the GNU system is not the same as the\n   collection of all GNU software. The GNU system includes programs that\n   are not GNU software, programs that were developed by other people and\n   projects for their own purposes, but which we can use because they are\n   free software.\n\n  Commencing the project\n\n   In January 1984 I quit my job at MIT and began writing GNU software.\n   Leaving MIT was necessary so that MIT would not be able to interfere\n   with distributing GNU as free software. If I had remained on the staff,\n   MIT could have claimed to own the work, and could have imposed their\n   own distribution terms, or even turned the work into a proprietary\n   software package. I had no intention of doing a large amount of work\n   only to see it become useless for its intended purpose: creating a new\n   software-sharing community.\n\n   However, Professor Winston, then the head of the MIT AI Lab, kindly\n   invited me to keep using the lab's facilities.\n\n  The first steps\n\n   Shortly before beginning the GNU project, I heard about the Free\n   University Compiler Kit, also known as VUCK. (The Dutch word for \"free\"\n   is written with a V.) This was a compiler designed to handle multiple\n   languages, including C and Pascal, and to support multiple target\n   machines. I wrote to its author asking if GNU could use it.\n\n   He responded derisively, stating that the university was free but the\n   compiler was not. I therefore decided that my first program for the GNU\n   project would be a multi-language, multi-platform compiler.\n\n   Hoping to avoid the need to write the whole compiler myself, I obtained\n   the source code for the Pastel compiler, which was a multi-platform\n   compiler developed at Lawrence Livermore Lab. It supported, and was\n   written in, an extended version of Pascal, designed to be a\n   system-programming language. I added a C front end, and began porting\n   it to the Motorola 68000 computer. But I had to give that up when I\n   discovered that the compiler needed many megabytes of stack space, and\n   the available 68000 Unix system would only allow 64k.\n\n   I then realized that the Pastel compiler functioned by parsing the\n   entire input file into a syntax tree, converting the whole syntax tree\n   into a chain of \"instructions\", and then generating the whole output\n   file, without ever freeing any storage. At this point, I concluded I\n   would have to write a new compiler from scratch. That new compiler is\n   now known as GCC; none of the Pastel compiler is used in it, but I\n   managed to adapt and use the C front end that I had written. But that\n   was some years later; first, I worked on GNU Emacs.\n\n  GNU Emacs\n\n   I began work on GNU Emacs in September 1984, and in early 1985 it was\n   beginning to be usable. This enabled me to begin using Unix systems to\n   do editing; having no interest in learning to use vi or ed, I had done\n   my editing on other kinds of machines until then.\n\n   At this point, people began wanting to use GNU Emacs, which raised the\n   question of how to distribute it. Of course, I put it on the anonymous\n   ftp server on the MIT computer that I used. (This computer,\n   prep.ai.mit.edu, thus became the principal GNU ftp distribution site;\n   when it was decommissioned a few years later, we transferred the name\n   to our new ftp server.) But at that time, many of the interested people\n   were not on the Internet and could not get a copy by ftp. So the\n   question was, what would I say to them?\n\n   I could have said, \"Find a friend who is on the net and who will make a\n   copy for you.\" Or I could have done what I did with the original PDP-10\n   Emacs: tell them, \"Mail me a tape and a SASE, and I will mail it back\n   with Emacs on it.\" But I had no job, and I was looking for ways to make\n   money from free software. So I announced that I would mail a tape to\n   whoever wanted one, for a fee of $150. In this way, I started a free\n   software distribution business, the precursor of the companies that\n   today distribute entire Linux-based GNU systems.\n\n  Is a program free for every user?\n\n   If a program is free software when it leaves the hands of its author,\n   this does not necessarily mean it will be free software for everyone\n   who has a copy of it. For example, public domain software (software\n   that is not copyrighted) is free software; but anyone can make a\n   proprietary modified version of it. Likewise, many free programs are\n   copyrighted but distributed under simple permissive licenses which\n   allow proprietary modified versions.\n\n   The paradigmatic example of this problem is the X Window System.\n   Developed at MIT, and released as free software with a permissive\n   license, it was soon adopted by various computer companies. They added\n   X to their proprietary Unix systems, in binary form only, and covered\n   by the same nondisclosure agreement. These copies of X were no more\n   free software than Unix was.\n\n   The developers of the X Window System did not consider this a\n   problem--they expected and intended this to happen. Their goal was not\n   freedom, just \"success\", defined as \"having many users.\" They did not\n   care whether these users had freedom, only that they should be\n   numerous.\n\n   This led to a paradoxical situation where two different ways of\n   counting the amount of freedom gave different answers to the question,\n   \"Is this program free?\" If you judged based on the freedom provided by\n   the distribution terms of the MIT release, you would say that X was\n   free software. But if you measured the freedom of the average user of\n   X, you would have to say it was proprietary software. Most X users were\n   running the proprietary versions that came with Unix systems, not the\n   free version.\n\n  Copyleft and the GNU GPL\n\n   The goal of GNU was to give users freedom, not just to be popular. So\n   we needed to use distribution terms that would prevent GNU software\n   from being turned into proprietary software. The method we use is\n   called \"copyleft\".(1)\n\n   Copyleft uses copyright law, but flips it over to serve the opposite of\n   its usual purpose: instead of a means of privatizing software, it\n   becomes a means of keeping software free.\n\n   The central idea of copyleft is that we give everyone permission to run\n   the program, copy the program, modify the program, and distribute\n   modified versions--but not permission to add restrictions of their own.\n   Thus, the crucial freedoms that define \"free software\" are guaranteed\n   to everyone who has a copy; they become inalienable rights.\n\n   For an effective copyleft, modified versions must also be free. This\n   ensures that work based on ours becomes available to our community if\n   it is published. When programmers who have jobs as programmers\n   volunteer to improve GNU software, it is copyleft that prevents their\n   employers from saying, \"You can't share those changes, because we are\n   going to use them to make our proprietary version of the program.\"\n\n   The requirement that changes must be free is essential if we want to\n   ensure freedom for every user of the program. The companies that\n   privatized the X Window System usually made some changes to port it to\n   their systems and hardware. These changes were small compared with the\n   great extent of X, but they were not trivial. If making changes were an\n   excuse to deny the users freedom, it would be easy for anyone to take\n   advantage of the excuse.\n\n   A related issue concerns combining a free program with non-free code.\n   Such a combination would inevitably be non-free; whichever freedoms are\n   lacking for the non-free part would be lacking for the whole as well.\n   To permit such combinations would open a hole big enough to sink a\n   ship. Therefore, a crucial requirement for copyleft is to plug this\n   hole: anything added to or combined with a copylefted program must be\n   such that the larger combined version is also free and copylefted.\n\n   The specific implementation of copyleft that we use for most GNU\n   software is the GNU General Public License, or GNU GPL for short. We\n   have other kinds of copyleft that are used in specific circumstances.\n   GNU manuals are copylefted also, but use a much simpler kind of\n   copyleft, because the complexity of the GNU GPL is not necessary for\n   manuals.(2)\n\n   (1) In 1984 or 1985, Don Hopkins (a very imaginative fellow) mailed me\n   a letter. On the envelope he had written several amusing sayings,\n   including this one: \"Copyleft--all rights reversed.\" I used the word\n   \"copyleft\" to name the distribution concept I was developing at the\n   time.\n\n   (2) We now use the GNU Free Documentation License for documentation.\n\n  The Free Software Foundation\n\n   As interest in using Emacs was growing, other people became involved in\n   the GNU project, and we decided that it was time to seek funding once\n   again. So in 1985 we created the Free Software Foundation, a tax-exempt\n   charity for free software development. The FSF also took over the Emacs\n   tape distribution business; later it extended this by adding other free\n   software (both GNU and non-GNU) to the tape, and by selling free\n   manuals as well.\n\n   The FSF accepts donations, but most of its income has always come from\n   sales--of copies of free software, and of other related services. Today\n   it sells CD-ROMs of source code, CD-ROMs with binaries, nicely printed\n   manuals (all with freedom to redistribute and modify), and Deluxe\n   Distributions (where we build the whole collection of software for your\n   choice of platform).\n\n   Free Software Foundation employees have written and maintained a number\n   of GNU software packages. Two notable ones are the C library and the\n   shell. The GNU C library is what every program running on a GNU/Linux\n   system uses to communicate with Linux. It was developed by a member of\n   the Free Software Foundation staff, Roland McGrath. The shell used on\n   most GNU/Linux systems is BASH, the Bourne Again Shell(1), which was\n   developed by FSF employee Brian Fox.\n\n   We funded development of these programs because the GNU project was not\n   just about tools or a development environment. Our goal was a complete\n   operating system, and these programs were needed for that goal.\n\n   (1) \"Bourne again Shell\" is a joke on the name ``Bourne Shell'', which\n   was the usual shell on Unix.\n\n  Free software support\n\n   The free software philosophy rejects a specific widespread business\n   practice, but it is not against business. When businesses respect the\n   users' freedom, we wish them success.\n\n   Selling copies of Emacs demonstrates one kind of free software\n   business. When the FSF took over that business, I needed another way to\n   make a living. I found it in selling services relating to the free\n   software I had developed. This included teaching, for subjects such as\n   how to program GNU Emacs and how to customize GCC, and software\n   development, mostly porting GCC to new platforms.\n\n   Today each of these kinds of free software business is practiced by a\n   number of corporations. Some distribute free software collections on\n   CD-ROM; others sell support at levels ranging from answering user\n   questions, to fixing bugs, to adding major new features. We are even\n   beginning to see free software companies based on launching new free\n   software products.\n\n   Watch out, though--a number of companies that associate themselves with\n   the term \"open source\" actually base their business on non-free\n   software that works with free software. These are not free software\n   companies, they are proprietary software companies whose products tempt\n   users away from freedom. They call these \"value added\", which reflects\n   the values they would like us to adopt: convenience above freedom. If\n   we value freedom more, we should call them \"freedom subtracted\"\n   products.\n\n  Technical goals\n\n   The principal goal of GNU was to be free software. Even if GNU had no\n   technical advantage over Unix, it would have a social advantage,\n   allowing users to cooperate, and an ethical advantage, respecting the\n   user's freedom.\n\n   But it was natural to apply the known standards of good practice to the\n   work--for example, dynamically allocating data structures to avoid\n   arbitrary fixed size limits, and handling all the possible 8-bit codes\n   wherever that made sense.\n\n   In addition, we rejected the Unix focus on small memory size, by\n   deciding not to support 16-bit machines (it was clear that 32-bit\n   machines would be the norm by the time the GNU system was finished),\n   and to make no effort to reduce memory usage unless it exceeded a\n   megabyte. In programs for which handling very large files was not\n   crucial, we encouraged programmers to read an entire input file into\n   core, then scan its contents without having to worry about I/O.\n\n   These decisions enabled many GNU programs to surpass their Unix\n   counterparts in reliability and speed.\n\n  Donated computers\n\n   As the GNU project's reputation grew, people began offering to donate\n   machines running UNIX to the project. These were very useful, because\n   the easiest way to develop components of GNU was to do it on a UNIX\n   system, and replace the components of that system one by one. But they\n   raised an ethical issue: whether it was right for us to have a copy of\n   UNIX at all.\n\n   UNIX was (and is) proprietary software, and the GNU project's\n   philosophy said that we should not use proprietary software. But,\n   applying the same reasoning that leads to the conclusion that violence\n   in self defense is justified, I concluded that it was legitimate to use\n   a proprietary package when that was crucial for developing a free\n   replacement that would help others stop using the proprietary package.\n\n   But, even if this was a justifiable evil, it was still an evil. Today\n   we no longer have any copies of Unix, because we have replaced them\n   with free operating systems. If we could not replace a machine's\n   operating system with a free one, we replaced the machine instead.\n\n  The GNU Task List\n\n   As the GNU project proceeded, and increasing numbers of system\n   components were found or developed, eventually it became useful to make\n   a list of the remaining gaps. We used it to recruit developers to write\n   the missing pieces. This list became known as the GNU task list. In\n   addition to missing Unix components, we listed added various other\n   useful software and documentation projects that, we thought, a truly\n   complete system ought to have.\n\n   Today, hardly any Unix components are left in the GNU task list--those\n   jobs have been done, aside from a few inessential ones. But the list is\n   full of projects that some might call \"applications\". Any program that\n   appeals to more than a narrow class of users would be a useful thing to\n   add to an operating system.\n\n   Even games are included in the task list--and have been since the\n   beginning. Unix included games, so naturally GNU should too. But\n   compatibility was not an issue for games, so we did not follow the list\n   of games that Unix had. Instead, we listed a spectrum of different\n   kinds of games that users might like.\n\n  The GNU Library GPL\n\n   The GNU C library uses a special kind of copyleft called the GNU\n   Library General Public License(1), which gives permission to link\n   proprietary software with the library. Why make this exception?\n\n   It is not a matter of principle; there is no principle that says\n   proprietary software products are entitled to include our code. (Why\n   contribute to a project predicated on refusing to share with us?) Using\n   the LGPL for the C library, or for any library, is a matter of\n   strategy.\n\n   The C library does a generic job; every proprietary system or compiler\n   comes with a C library. Therefore, to make our C library available only\n   to free software would not have given free software any advantage--it\n   would only have discouraged use of our library.\n\n   One system is an exception to this: on the GNU system (and this\n   includes GNU/Linux), the GNU C library is the only C library. So the\n   distribution terms of the GNU C library determine whether it is\n   possible to compile a proprietary program for the GNU system. There is\n   no ethical reason to allow proprietary applications on the GNU system,\n   but strategically it seems that disallowing them would do more to\n   discourage use of the GNU system than to encourage development of free\n   applications.\n\n   That is why using the Library GPL is a good strategy for the C library.\n   For other libraries, the strategic decision needs to be considered on a\n   case-by-case basis. When a library does a special job that can help\n   write certain kinds of programs, then releasing it under the GPL,\n   limiting it to free programs only, is a way of helping other free\n   software developers, giving them an advantage against proprietary\n   software.\n\n   Consider GNU Readline, a library that was developed to provide\n   command-line editing for BASH. Readline is released under the ordinary\n   GNU GPL, not the Library GPL. This probably does reduce the amount\n   Readline is used, but that is no loss for us. Meanwhile, at least one\n   useful application has been made free software specifically so it could\n   use Readline, and that is a real gain for the community.\n\n   Proprietary software developers have the advantages money provides;\n   free software developers need to make advantages for each other. I hope\n   some day we will have a large collection of GPL-covered libraries that\n   have no parallel available to proprietary software, providing useful\n   modules to serve as building blocks in new free software, and adding up\n   to a major advantage for further free software development.\n\n   (1) This license is now called the GNU Lesser General Public License,\n   to avoid giving the idea that all libraries ought to use it.\n   See http://www.gnu.org/philosophy/why-not-lgpl.html.\n\n  Scratching an itch?\n\n   Eric Raymond says that \"Every good work of software starts by\n   scratching a developer's personal itch.\" Maybe that happens sometimes,\n   but many essential pieces of GNU software were developed in order to\n   have a complete free operating system. They come from a vision and a\n   plan, not from impulse.\n\n   For example, we developed the GNU C library because a Unix-like system\n   needs a C library, the Bourne-Again Shell (bash) because a Unix-like\n   system needs a shell, and GNU tar because a Unix-like system needs a\n   tar program. The same is true for my own programs--the GNU C compiler,\n   GNU Emacs, GDB and GNU Make.\n\n   Some GNU programs were developed to cope with specific threats to our\n   freedom. Thus, we developed gzip to replace the Compress program, which\n   had been lost to the community because of the LZW patents. We found\n   people to develop LessTif, and more recently started GNOME and Harmony,\n   to address the problems caused by certain proprietary libraries (see\n   below). We are developing the GNU Privacy Guard to replace popular\n   non-free encryption software, because users should not have to choose\n   between privacy and freedom.\n\n   Of course, the people writing these programs became interested in the\n   work, and many features were added to them by various people for the\n   sake of their own needs and interests. But that is not why the programs\n   exist.\n\n  Unexpected developments\n\n   At the beginning of the GNU project, I imagined that we would develop\n   the whole GNU system, then release it as a whole. That is not how it\n   happened.\n\n   Since each component of the GNU system was implemented on a Unix\n   system, each component could run on Unix systems, long before a\n   complete GNU system existed. Some of these programs became popular, and\n   users began extending them and porting them---to the various\n   incompatible versions of Unix, and sometimes to other systems as well.\n\n   The process made these programs much more powerful, and attracted both\n   funds and contributors to the GNU project. But it probably also delayed\n   completion of a minimal working system by several years, as GNU\n   developers' time was put into maintaining these ports and adding\n   features to the existing components, rather than moving on to write one\n   missing component after another.\n\n  The GNU Hurd\n\n   By 1990, the GNU system was almost complete; the only major missing\n   component was the kernel. We had decided to implement our kernel as a\n   collection of server processes running on top of Mach. Mach is a\n   microkernel developed at Carnegie Mellon University and then at the\n   University of Utah; the GNU HURD is a collection of servers (or ``herd\n   of gnus'') that run on top of Mach, and do the various jobs of the Unix\n   kernel. The start of development was delayed as we waited for Mach to\n   be released as free software, as had been promised.\n\n   One reason for choosing this design was to avoid what seemed to be the\n   hardest part of the job: debugging a kernel program without a\n   source-level debugger to do it with. This part of the job had been done\n   already, in Mach, and we expected to debug the HURD servers as user\n   programs, with GDB. But it took a long time to make that possible, and\n   the multi-threaded servers that send messages to each other have turned\n   out to be very hard to debug. Making the HURD work solidly has\n   stretched on for many years.\n\n  Alix\n\n   The GNU kernel was not originally supposed to be called the HURD. Its\n   original name was Alix--named after the woman who was my sweetheart at\n   the time. She, a Unix system administrator, had pointed out how her\n   name would fit a common naming pattern for Unix system versions; as a\n   joke, she told her friends, \"Someone should name a kernel after me.\" I\n   said nothing, but decided to surprise her with a kernel named Alix.\n\n   It did not stay that way. Michael Bushnell (now Thomas), the main\n   developer of the kernel, preferred the name HURD, and redefined Alix to\n   refer to a certain part of the kernel--the part that would trap system\n   calls and handle them by sending messages to HURD servers.\n\n   Ultimately, Alix and I broke up, and she changed her name;\n   independently, the HURD design was changed so that the C library would\n   send messages directly to servers, and this made the Alix component\n   disappear from the design.\n\n   But before these things happened, a friend of hers came across the name\n   Alix in the HURD source code, and mentioned the name to her. So the\n   name did its job.\n\n  Linux and GNU/Linux\n\n   The GNU Hurd is not ready for production use. Fortunately, another\n   kernel is available. In 1991, Linus Torvalds developed a\n   Unix-compatible kernel and called it Linux. Around 1992, combining\n   Linux with the not-quite-complete GNU system resulted in a complete\n   free operating system. (Combining them was a substantial job in itself,\n   of course.) It is due to Linux that we can actually run a version of\n   the GNU system today.\n\n   We call this system version GNU/Linux, to express its composition as a\n   combination of the GNU system with Linux as the kernel.\n\n  Challenges in our future\n\n   We have proved our ability to develop a broad spectrum of free\n   software. This does not mean we are invincible and unstoppable. Several\n   challenges make the future of free software uncertain; meeting them\n   will require steadfast effort and endurance, sometimes lasting for\n   years. It will require the kind of determination that people display\n   when they value their freedom and will not let anyone take it away.\n\n   The following four sections discuss these challenges.\n\n  Secret hardware\n\n   Hardware manufacturers increasingly tend to keep hardware\n   specifications secret. This makes it difficult to write free drivers so\n   that Linux and XFree86 can support new hardware. We have complete free\n   systems today, but we will not have them tomorrow if we cannot support\n   tomorrow's computers.\n\n   There are two ways to cope with this problem. Programmers can do\n   reverse engineering to figure out how to support the hardware. The rest\n   of us can choose the hardware that is supported by free software; as\n   our numbers increase, secrecy of specifications will become a\n   self-defeating policy.\n\n   Reverse engineering is a big job; will we have programmers with\n   sufficient determination to undertake it? Yes--if we have built up a\n   strong feeling that free software is a matter of principle, and\n   non-free drivers are intolerable. And will large numbers of us spend\n   extra money, or even a little extra time, so we can use free drivers?\n   Yes, if the determination to have freedom is widespread.\n\n  Non-free libraries\n\n   A non-free library that runs on free operating systems acts as a trap\n   for free software developers. The library's attractive features are the\n   bait; if you use the library, you fall into the trap, because your\n   program cannot usefully be part of a free operating system. (Strictly\n   speaking, we could include your program, but it won't run with the\n   library missing.) Even worse, if a program that uses the proprietary\n   library becomes popular, it can lure other unsuspecting programmers\n   into the trap.\n\n   The first instance of this problem was the Motif toolkit, back in the\n   80s. Although there were as yet no free operating systems, it was clear\n   what problem Motif would cause for them later on. The GNU Project\n   responded in two ways: by asking individual free software projects to\n   support the free X toolkit widgets as well as Motif, and by asking for\n   someone to write a free replacement for Motif. The job took many years;\n   LessTif, developed by the Hungry Programmers, became powerful enough to\n   support most Motif applications only in 1997.\n\n   Between 1996 and 1998, another non-free GUI toolkit library, called Qt,\n   was used in a substantial collection of free software, the desktop KDE.\n\n   Free GNU/Linux systems were unable to use KDE, because we could not use\n   the library. However, some commercial distributors of GNU/Linux systems\n   who were not strict about sticking with free software added KDE to\n   their systems--producing a system with more capabilities, but less\n   freedom. The KDE group was actively encouraging more programmers to use\n   Qt, and millions of new \"Linux users\" had never been exposed to the\n   idea that there was a problem in this. The situation appeared grim.\n\n   The free software community responded to the problem in two ways: GNOME\n   and Harmony.\n\n   GNOME, the GNU Network Object Model Environment, is GNU's desktop\n   project. Started in 1997 by Miguel de Icaza, and developed with the\n   support of Red Hat Software, GNOME set out to provide similar desktop\n   facilities, but using free software exclusively. It has technical\n   advantages as well, such as supporting a variety of languages, not just\n   C++. But its main purpose was freedom: not to require the use of any\n   non-free software.\n\n   Harmony is a compatible replacement library, designed to make it\n   possible to run KDE software without using Qt.\n\n   In November 1998, the developers of Qt announced a change of license\n   which, when carried out, should make Qt free software. There is no way\n   to be sure, but I think that this was partly due to the community's\n   firm response to the problem that Qt posed when it was non-free. (The\n   new license is inconvenient and inequitable, so it remains desirable to\n   avoid using Qt.)\n\n   [Subsequent note: in September 2000, Qt was rereleased under the GNU\n   GPL, which essentially solved this problem.]\n\n   How will we respond to the next tempting non-free library? Will the\n   whole community understand the need to stay out of the trap? Or will\n   many of us give up freedom for convenience, and produce a major\n   problem? Our future depends on our philosophy.\n\n  Software patents\n\n   The worst threat we face comes from software patents, which can put\n   algorithms and features off limits to free software for up to twenty\n   years. The LZW compression algorithm patents were applied for in 1983,\n   and we still cannot release free software to produce proper compressed\n   GIFs. In 1998, a free program to produce MP3 compressed audio was\n   removed from distribution under threat of a patent suit.\n\n   There are ways to cope with patents: we can search for evidence that a\n   patent is invalid, and we can look for alternative ways to do a job.\n   But each of these methods works only sometimes; when both fail, a\n   patent may force all free software to lack some feature that users\n   want. What will we do when this happens?\n\n   Those of us who value free software for freedom's sake will stay with\n   free software anyway. We will manage to get work done without the\n   patented features. But those who value free software because they\n   expect it to be technically superior are likely to call it a failure\n   when a patent holds it back. Thus, while it is useful to talk about the\n   practical effectiveness of the \"cathedral\" model of development (1),\n   and the reliability and power of some free software, we must not stop\n   there. We must talk about freedom and principle.\n\n   (1) It would have been clearer to write `of the \"bazaar\" model', since\n   that was the alternative that was new and initially controversial.\n\n  Free documentation\n\n   The biggest deficiency in our free operating systems is not in the\n   software--it is the lack of good free manuals that we can include in\n   our systems. Documentation is an essential part of any software\n   package; when an important free software package does not come with a\n   good free manual, that is a major gap. We have many such gaps today.\n\n   Free documentation, like free software, is a matter of freedom, not\n   price. The criterion for a free manual is pretty much the same as for\n   free software: it is a matter of giving all users certain freedoms.\n   Redistribution (including commercial sale) must be permitted, on-line\n   and on paper, so that the manual can accompany every copy of the\n   program.\n\n   Permission for modification is crucial too. As a general rule, I don't\n   believe that it is essential for people to have permission to modify\n   all sorts of articles and books. For example, I don't think you or I\n   are obliged to give permission to modify articles like this one, which\n   describe our actions and our views.\n\n   But there is a particular reason why the freedom to modify is crucial\n   for documentation for free software. When people exercise their right\n   to modify the software, and add or change its features, if they are\n   conscientious they will change the manual too--so they can provide\n   accurate and usable documentation with the modified program. A manual\n   which does not allow programmers to be conscientious and finish the\n   job, does not fill our community's needs.\n\n   Some kinds of limits on how modifications are done pose no problem. For\n   example, requirements to preserve the original author's copyright\n   notice, the distribution terms, or the list of authors, are ok. It is\n   also no problem to require modified versions to include notice that\n   they were modified, even to have entire sections that may not be\n   deleted or changed, as long as these sections deal with nontechnical\n   topics. These kinds of restrictions are not a problem because they\n   don't stop the conscientious programmer from adapting the manual to fit\n   the modified program. In other words, they don't block the free\n   software community from making full use of the manual.\n\n   However, it must be possible to modify all the *technical* content of\n   the manual, and then distribute the result in all the usual media,\n   through all the usual channels; otherwise, the restrictions do obstruct\n   the community, the manual is not free, and we need another manual.\n\n   Will free software developers have the awareness and determination to\n   produce a full spectrum of free manuals? Once again, our future depends\n   on philosophy.\n\n  We must talk about freedom\n\n   Estimates today are that there are ten million users of GNU/Linux\n   systems such as Debian GNU/Linux and Red Hat Linux. Free software has\n   developed such practical advantages that users are flocking to it for\n   purely practical reasons.\n\n   The good consequences of this are evident: more interest in developing\n   free software, more customers for free software businesses, and more\n   ability to encourage companies to develop commercial free software\n   instead of proprietary software products.\n\n   But interest in the software is growing faster than awareness of the\n   philosophy it is based on, and this leads to trouble. Our ability to\n   meet the challenges and threats described above depends on the will to\n   stand firm for freedom. To make sure our community has this will, we\n   need to spread the idea to the new users as they come into the\n   community.\n\n   But we are failing to do so: the efforts to attract new users into our\n   community are far outstripping the efforts to teach them the civics of\n   our community. We need to do both, and we need to keep the two efforts\n   in balance.\n\n  \"Open Source\"\n\n   Teaching new users about freedom became more difficult in 1998, when a\n   part of the community decided to stop using the term \"free software\"\n   and say \"open source software\" instead.\n\n   Some who favored this term aimed to avoid the confusion of \"free\" with\n   \"gratis\"--a valid goal. Others, however, aimed to set aside the spirit\n   of principle that had motivated the free software movement and the GNU\n   project, and to appeal instead to executives and business users, many\n   of whom hold an ideology that places profit above freedom, above\n   community, above principle. Thus, the rhetoric of \"open source\" focuses\n   on the potential to make high quality, powerful software, but shuns the\n   ideas of freedom, community, and principle.\n\n   The \"Linux\" magazines are a clear example of this--they are filled with\n   advertisements for proprietary software that works with GNU/Linux. When\n   the next Motif or Qt appears, will these magazines warn programmers to\n   stay away from it, or will they run ads for it?\n\n   The support of business can contribute to the community in many ways;\n   all else being equal, it is useful. But winning their support by\n   speaking even less about freedom and principle can be disastrous; it\n   makes the previous imbalance between outreach and civics education even\n   worse.\n\n   \"Free software\" and \"open source\" describe the same category of\n   software, more or less, but say different things about the software,\n   and about values. The GNU Project continues to use the term \"free\n   software\", to express the idea that freedom, not just technology, is\n   important.\n\n  Try!\n\n   Yoda's philosophy (\"There is no `try'\") sounds neat, but it doesn't\n   work for me. I have done most of my work while anxious about whether I\n   could do the job, and unsure that it would be enough to achieve the\n   goal if I did. But I tried anyway, because there was no one but me\n   between the enemy and my city. Surprising myself, I have sometimes\n   succeeded.\n\n   Sometimes I failed; some of my cities have fallen. Then I found another\n   threatened city, and got ready for another battle. Over time, I've\n   learned to look for threats and put myself between them and my city,\n   calling on other hackers to come and join me.\n\n   Nowadays, often I'm not the only one. It is a relief and a joy when I\n   see a regiment of hackers digging in to hold the line, and I realize,\n   this city may survive--for now. But the dangers are greater each year,\n   and now Microsoft has explicitly targeted our community. We can't take\n   the future of freedom for granted. Don't take it for granted! If you\n   want to keep your freedom, you must be prepared to defend it.\n\n  Copyright (C) 1998 Richard Stallman\n\n  Verbatim copying and distribution of this entire article is permitted\n  in any medium, provided this notice is preserved.","caption":"gnu.org","description":"English [en]   العربية [ar]   Azərbaycanca [az]   български [bg]   বাংলা [bn]   català [ca]   Česky [cs]   dansk [da]   Deutsch [de]   ελληνικά [el]   español [es]   فارسی [fa]   français [fr]   hrvatski [hr]   magyar [hu]   Bahasa Indonesia [id]   italiano [it]   日本語 [ja]   한국어 [ko]   lietuvių [lt]…","created_time":"2015-08-02T03:21:15+10:00","total_likes":0,"total_comments":0},{"id":"172338516139198_982687651770943","from":{"name":"Islam Abolfotouh","id":"1442706032414674"},"message":"بحاول اسطب W10 بالbootcamp واقف عند الشاشه دي\nحد شاف المشكله دي قبل كده ؟","caption":null,"description":null,"created_time":"2015-08-01T19:25:31+10:00","total_likes":0,"total_comments":13},{"id":"172338516139198_982063338500041","from":{"name":"Ahmed Al Jabry","id":"1422451614480113"},"message":"رجعت ريما :D","caption":"social.techcrunch.com","description":"With Edge in Windows 10, Microsoft has finally delivered a capable browser to replace the aging Internet Explorer. Microsoft likes Windows 10 so much, it..","created_time":"2015-07-31T09:41:58+10:00","total_likes":14,"total_comments":11},{"id":"172338516139198_983127228393652","from":{"name":"Mohammad Tayseer","id":"10154965677956341"},"message":"Micro:bit is an embedded system learning board, similar to Arduino in purpose. It supports Micro USB & Bluetooth Low Energy (BLE). \n\nIt will be given to every 12 years old student in the UK in October, for free, in order to encourage them to program.","caption":"youtube.com","description":"BBC Micro:Bit Hands On with WIRED's Oli Franklin-Wallis http://wired.uk/7X1vOT he BBC has revealed the final design of its Micro:Bit computer in a launch eve...","created_time":"2015-08-02T15:13:20+10:00","total_likes":7,"total_comments":0},{"id":"172338516139198_983138488392526","from":{"name":"Sameh Magdy","id":"1390728197650488"},"message":null,"caption":null,"description":"The little things that make you smile... #CodeChef\nVia - http://bit.ly/1OMQoRp","created_time":"2015-08-02T15:57:43+10:00","total_likes":0,"total_comments":0}]}