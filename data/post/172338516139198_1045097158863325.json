{"id":"172338516139198_1045097158863325","from":{"name":"Alaa Attya Mohamed","id":"10210243495897310"},"message":"That's why photos are saving in a smaller size and perfect resolution! \nEven they made their infrastructure more faster\n\n","story":"Alaa Attya Mohamed shared a link to the group: Egyptian Geeks.","story_tags":{"0":[{"id":"10210243495897310","name":"Alaa Attya Mohamed","type":"user","offset":0,"length":18}],"47":[{"id":"172338516139198","name":"Egyptian Geeks","type":"group","offset":47,"length":14}]},"picture":"https://fbexternal-a.akamaihd.net/safe_image.php?d=AQAhCbQt5JOmc-jr&w=130&h=130&url=https%3A%2F%2Fcode.facebook.com%2Fimages%2Fengsite%2Fcode.png&cfs=1&_nc_hash=AQCPIiFZZNsMPkLM","link":"https://code.facebook.com/posts/685565858139515/needle-in-a-haystack-efficient-storage-of-billions-of-photos/","name":"Needle in a haystack: efficient storage of billions of photos","caption":"code.facebook.com","description":"The Photos application is one of Facebook’s most popular features. Up to date, users have uploaded over 15 billion photos which makes Facebook the biggest photo sharing website. For each uploaded photo, Facebook generates and stores four images of different sizes, which translates to a total of 60 b…","icon":"https://www.facebook.com/images/icons/post.gif","actions":[{"name":"Comment","link":"https://www.facebook.com/172338516139198/posts/1045097158863325"},{"name":"Like","link":"https://www.facebook.com/172338516139198/posts/1045097158863325"},{"name":"Report Post to Admin","link":"https://www.facebook.com/groups/egyptian.geeks/members/"}],"privacy":{"value":"","description":"","friends":"","allow":"","deny":""},"type":"link","status_type":"shared_story","created_time":"2015-12-14T19:23:47+0000","updated_time":"2015-12-16T07:54:46+0000","is_hidden":false,"is_expired":false,"likes":{"data":[{"id":"10154868571206047","name":"Mosab Ibrahim"},{"id":"10158338512335721","name":"Nader Nabil"},{"id":"10158249712720065","name":"Shenouda Bertel"},{"id":"10158223276925562","name":"Mohammed ElBalkini"}],"paging":{"cursors":{"before":"MTAxNTQ4Njg1NzEyMDYwNDcZD","after":"MTAxNTgyMjMyNzY5MjU1NjIZD"}}},"comments":{"data":[{"created_time":"2015-12-15T00:05:54+0000","from":{"name":"Mohamed Abdel Aty","id":"10212491964880718"},"message":"the scarce information they provided about the Delete operation just confirms what we all doubted : THERE IS NO DELETE OPERATION :D","can_remove":false,"like_count":0,"user_likes":false,"id":"1045179532188421"},{"created_time":"2015-12-15T00:28:54+0000","from":{"name":"Khaled M. Diab","id":"10212550395463324"},"message":"Alaa Attya Mohamed Actually they're saying they store photos in 4 resolutions, it is not about \"storage saving\" but about reducing disk IO and increasing requests throughput. In my viewpoint, it can be considered as a general purpose nfs (similar to google file system; they have almost the same requirements).\n\nMore important aspect in the fast FB storage architecture is \"storage recovery\", here they have a different mindset than Google. Google keeps at least three copies of any file in different locations (rack, DC or external DC), FB designed an erasure code (Hitchhiker) based on Reed-Solomon codes, which needs only 1.4X of the original size (not 3X) while keeping the operational throughput (e.g. normal usage) as high as possible.\n\nhttps://research.facebook.com/publications/1445994382319911/a-hitchhiker-s-guide-to-fast-and-efficient-data-reconstruction-in-erasure-coded-data-centers/\n\nhttps://research.facebook.com/publications/300734513398948/xoring-elephants-novel-erasure-codes-for-big-data/\n\nhttps://www.usenix.org/legacy/events/osdi10/tech/full_papers/Beaver.pdf","can_remove":false,"like_count":0,"message_tags":[{"id":"10210243495897310","length":18,"name":"Alaa Attya Mohamed","offset":0,"type":"user"}],"user_likes":false,"id":"1045184612187913"},{"created_time":"2015-12-16T06:53:22+0000","from":{"name":"Mohammed Al Ashaal","id":"740831752757314"},"message":"``\n---\nThey are using \"Log-Structured\" algorithm which is the core of the most of DBMS today, most log-structured based DBs don't have \na real \"Delete\" but just they remove the reference of the key from the memory and there is a compaction algorithms to rewrite the data file(s) without any interruption in smart way.\n---\nhere is an explanation of some internals of LevelDB \"Google\", which is the core of RocksDB \"Facebook\" ..\nhttps://www.igvita.com/2012/02/06/sstable-and-log-structured-storage-leveldb/\n---\nThe whole point of Facebook's implementation is to reduce\nDisk I/O not just for quality or size, and there are many storage engines like that \ni.e: SeaWeedFS\nhttps://github.com/chrislusf/seaweedfs\n---\nIn other words, they created a distributed key => value storage\nthat stores values in separated file(s), and the a reference in the memory (and it isn't a new thing) .\n---\nHere is my implementation just for the \"Append Only\" part .\nIt stores the data and returns a string which is just the data position (offset:length) in the main data file, then i store that reference in any db\ni.e: redis, and when i want to remove data, i just remove the key-value from redis .\nhttps://godoc.org/github.com/alash3al/aof ,\ni coded it in Golang .\n---\nany wrong info above ?\nok, correct me, you are welcome .","can_remove":false,"like_count":0,"user_likes":false,"id":"1045760762130298"}],"paging":{"cursors":{"before":"WTI5dGJXVnVkRjlqZAFhKemIzSTZANVEEwTlRFM09UVXpNakU0T0RReU1Ub3hORFV3TVRNM09UVTAZD","after":"WTI5dGJXVnVkRjlqZAFhKemIzSTZANVEEwTlRjMk1EYzJNakV6TURJNU9Eb3hORFV3TWpRNE9EQXoZD"}}}}