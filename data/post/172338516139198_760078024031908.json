{"id":"172338516139198_760078024031908","from":{"id":"100003473671632","name":"مروان عبد المنعم"},"to":{"data":[{"name":"Egyptian Geeks","id":"172338516139198"}]},"message":"guys, which algorithms are you using for encrypting  Persistent Login Tokens\ni need something secure and fast (in decryption, because that will happen on every request)","actions":[{"name":"Comment","link":"https://www.facebook.com/172338516139198/posts/760078024031908"},{"name":"Like","link":"https://www.facebook.com/172338516139198/posts/760078024031908"}],"privacy":{"value":""},"type":"status","created_time":"2014-06-06T12:25:50+0000","updated_time":"2014-06-06T20:21:58+0000","comments":{"data":[{"id":"760110830695294","from":{"id":"630885091","name":"Sherif Omar"},"message":"You mean for local storage in a cookie?","can_remove":true,"created_time":"2014-06-06T13:52:22+0000","like_count":0,"user_likes":false},{"id":"760208534018857","from":{"id":"100003473671632","name":"مروان عبد المنعم"},"message":"no, i mean on the server","can_remove":true,"created_time":"2014-06-06T18:07:14+0000","like_count":0,"user_likes":false},{"id":"760209377352106","from":{"id":"630885091","name":"Sherif Omar"},"message":"Please explain further, this is generally a client side implementation.","can_remove":true,"created_time":"2014-06-06T18:09:49+0000","like_count":0,"user_likes":false},{"id":"760210247352019","from":{"id":"100003473671632","name":"مروان عبد المنعم"},"message":"after the user login with email and password, you send a token to the client side and save it on a cookie and save it also on the server.\nnow when he make a request you take the token and compare it to the one on the server to check if this is an authorized user or not","can_remove":true,"created_time":"2014-06-06T18:12:25+0000","like_count":0,"user_likes":false},{"id":"760211040685273","from":{"id":"100003473671632","name":"مروان عبد المنعم"},"message":"if you make a mobile app you would save that token in database maybe.\nthe idea is if someone got access to the database on the server that contains all the tokens he would be able to login as valid user and do whatever he wants.\nso instead of saving the token itself, saving an encryption of it (or hash), and comparing it on every request is more secure","can_remove":true,"created_time":"2014-06-06T18:15:11+0000","like_count":0,"user_likes":false},{"id":"760214400684937","from":{"id":"630885091","name":"Sherif Omar"},"message":"This is problematic, are you going to store an entry for every device the user logs in from? What happens when the user changes his password? Why not just store the user password md+5 salt in a cookie?","can_remove":true,"created_time":"2014-06-06T18:24:07+0000","like_count":0,"user_likes":false},{"id":"760221760684201","from":{"id":"100003473671632","name":"مروان عبد المنعم"},"message":"are you going to store an entry for every device the user logs in from? \nyes\n\nWhat happens when the user changes his password?\nfor actions like this, i will require entering the password, and will check both, the token and the password. and maybe generating new token after the process and send it to the client\n\nWhy not just store the user password md+5 salt in a cookie?\nwhat is the difference? you will have a value that should be checked every time ( the same idea) \nand i don't like to use the password for this\n\nif someone got access to the database and was able to decrypt the data\nthis will require all the users to change their passwords\nbut for the tokens, i could change all the tokens on the fly and the user will have to just login again\n\nNote: i use postgresql as a primary database, and redis for sessions, accessing the primary database for every request for authentication will make the app very slow","can_remove":true,"created_time":"2014-06-06T18:47:25+0000","like_count":0,"user_likes":false},{"id":"760257410680636","from":{"id":"630885091","name":"Sherif Omar"},"message":"Marwan just my opinion but sounds like a too complicated solution that will not make your users happy. You don't check every request, validate once per session. Use ssl. If you want to go an extra step use 2-factor - there are many standard implementations. Just my opinion.","can_remove":true,"created_time":"2014-06-06T20:21:58+0000","like_count":0,"user_likes":false}],"paging":{"cursors":{"after":"WTI5dGJXVnVkRjlqZFhKemIzSTZOell3TWpVM05ERXdOamd3TmpNMk9qRTBNREl3T0RZeE1UZzZMVEU9","before":"WTI5dGJXVnVkRjlqZFhKemIzSTZOell3TVRFd09ETXdOamsxTWprME9qRTBNREl3TmpJM05ESTZMVEU9"}}}}