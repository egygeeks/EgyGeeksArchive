{"id":"172338516139198_481919568514423","from":{"name":"Moutaz Shams","id":"1647326241951498"},"message":"مقال جميل في 2011 بيتسق مع رأيي تماما حول الجافاسكزفت والويب-فورمز، فتنة أو موضة كُره الـ abstraction لكن للأسف ماحدش مهتم بالرأي ده، كله ماشي ورا الهيبيز","story":"Moutaz Shams shared a link to the group: Egyptian Geeks.","story_tags":{"0":[{"id":"1647326241951498","name":"Moutaz Shams","type":"user","offset":0,"length":12}],"41":[{"id":"172338516139198","name":"Egyptian Geeks","type":"group","offset":41,"length":14}]},"picture":"https://fbexternal-a.akamaihd.net/safe_image.php?d=AQCRC12YquwAAmtc&w=130&h=130&url=http%3A%2F%2Fwww.hanselman.com%2Fblog%2Fcontent%2Fbinary%2FWindows-Live-Writer%2FDoes-View-Source-still-matter_DC82%2Fimage_thumb_1.png&cfs=1&_nc_hash=AQCkOJRmGd1ZMmtq","link":"http://www.hanselman.com/blog/JavaScriptIsAssemblyLanguageForTheWebSematicMarkupIsDeadCleanVsMachinecodedHTML.aspx","name":"JavaScript is Assembly Language for the Web: Sematic Markup is Dead! Clean vs. Machine-coded HTML -.","caption":"hanselman.com","description":"Scott Hanselman on Programming, User Experience, The Zen of Computers and Life in General","icon":"https://www.facebook.com/images/icons/post.gif","actions":[{"name":"Comment","link":"https://www.facebook.com/172338516139198/posts/481919568514423"},{"name":"Like","link":"https://www.facebook.com/172338516139198/posts/481919568514423"},{"name":"Report Post to Admin","link":"https://www.facebook.com/groups/egyptian.geeks/members/"}],"privacy":{"value":"","description":"","friends":"","allow":"","deny":""},"type":"link","status_type":"shared_story","created_time":"2012-11-08T01:16:41+0000","updated_time":"2012-11-10T01:00:53+0000","is_hidden":false,"is_expired":false,"comments":{"data":[{"created_time":"2012-11-08T07:05:33+0000","from":{"name":"Mohamed Elsherif","id":"10158483817400314"},"message":"Javascript is fun :) but I used to like Assembly too :)","can_remove":false,"like_count":0,"user_likes":false,"id":"481999688506411"},{"created_time":"2012-11-08T08:59:06+0000","from":{"name":"Moutaz Shams","id":"1647326241951498"},"message":"Assembly is low level and hard but does make sense, but JS is crazy you know, x != x is true if x is NaN, .3 - .2 != .2 - .1, allow minus zero.. etc","can_remove":false,"like_count":1,"user_likes":false,"id":"482020198504360"},{"created_time":"2012-11-08T22:04:30+0000","from":{"name":"Mohammad Tayseer","id":"10154965677956341"},"message":"Moutaz if you remember, in math infinity != infinity, NaN != NaN. It has nothing to do with JS\n\n.3 - .2 is related to floating points representation, and it happens in C++, Python, and all other languages which use this representation.","can_remove":false,"like_count":0,"message_tags":[{"id":"1647326241951498","length":6,"name":"Moutaz Shams","offset":0,"type":"user"}],"user_likes":false,"id":"482239868482393"},{"created_time":"2012-11-08T23:48:28+0000","from":{"name":"Moutaz Shams","id":"1647326241951498"},"message":"But these languages you mentioned may have double, decimal, float, and integer data types. JS has only one type for numbers. That's why it is a pain in JS.\n\n\"in math infinity != infinity, NaN != NaN\" yes that's in math/logic, but in JS: Infinity does equal Infinity, null does equal null, undefined does equal undefined, null does equal undefined, BUT NaN does not equal NaN and does not equal anything. And what make this worse in JS is because it is untyped, it does not throw exceptions/errors in overflow and has crazy implicit type conversions.\n\nIn SQL I know that null != null and null != anything, and in C# null = null, but I am 100% comfortable with this in C# and SQL because there is a consistent philosophy in every language, but JS has no philosophy, it is made in two weeks with trial and error. I only mentioned few samples, everybody knows how bad and painful it is and that's why they are making stuff like Dart and TypeScript.. etc","can_remove":false,"like_count":0,"user_likes":false,"id":"482270171812696"},{"created_time":"2012-11-09T03:45:10+0000","from":{"name":"Mohammad Tayseer","id":"10154965677956341"},"message":"Don't use == and !=. You should use !== and === because the first pair of operators will try to be smart, but actially it will be stupid :D","can_remove":false,"like_count":0,"user_likes":false,"id":"482345291805184"},{"created_time":"2012-11-09T17:14:02+0000","from":{"name":"Moutaz Shams","id":"1647326241951498"},"message":"If i use === all time I will encounter other crazy stuff like:\n3 !== new Number(3) and Number(3) !== new Number(3) and so on","can_remove":false,"like_count":0,"user_likes":false,"id":"482533885119658"},{"created_time":"2012-11-10T01:00:53+0000","from":{"name":"Mohammad Tayseer","id":"10154965677956341"},"message":"This is the output from firebug\n\n>>> typeof 3\n\"number\"\n>>> typeof Number(3)\n\"number\"\n>>> typeof new Number(3)\n\"object\"\n\nbut I agree that some parts suck","can_remove":false,"like_count":1,"user_likes":false,"id":"482677965105250"}],"paging":{"cursors":{"before":"WTI5dGJXVnVkRjlqZAFhKemIzSTZAORGd4T1RrNU5qZAzROVEEyTkRFeE9qRXpOVEl6TlRnek16TT0ZD","after":"WTI5dGJXVnVkRjlqZAFhKemIzSTZAORGd5TmpjM09UWTFNVEExTWpVd09qRXpOVEkxTURreU5UTT0ZD"}}}}